Relembrando Git e GitHub (resumo)
#GitHub#Git

Guilherme Garpelli
04/12/2022 14:06
1. O que é git e github?
Git é um sistema de versionamento de arquivos.
Github é uma plataforma de armazenamento de versões git.

1.1 Conceitos importantes
Respositórios são "pastas" do git, utilizadas para armazenamento de projetos
Branch é uma ramificação a partir de um fluxo principal
Commit são alterações feitas no projeto
Merge é a junção de uma branch alternativa com uma branch principal
Push é trazer os arquivos para o repositório remoto

Pull request são contribuições feitas em projetos OpenSource
2. Utilizando o Git e Github

Antes de utilizarmos o git é necessário configurá-lo com nome e o e-mail do usuário:
$ git config --global user.name "nome do usuário"
$ git config --global user.email "emaildousuario@exemplo.com"

Para verificar se as configurações foram feitas utilize o seguinte parâmetro:
$ git config --list

Ao inciar um novo repositório colocamos no Git Bash:
$ git init

Criado nosso repositório, devemos passar todos os arquivos desejados para área de stagging:
$ git add .
Ao colocar o ., estamos adicionando todos os arquivos presentes na nossa pasta, para adicionar um único item utilize o parâmetro:
$ git add nomeDoAqruivo.txt

Chegou a hora de commitar nosso arquivo. Para isso digite:
$ git commit -m "primeiro commit"
Entre aspas, é indicado que se coloque o nome da alteração feita no arquivo afim de facilitar a identificação dessas alterações.

O git bash, por padrão vem com a branch master, caso seja necessário modificar a branch principal para main, por exemplo, basta colocar:
$ git branch -M "main"

Chegou a hora de passar nossos arquivos para o Github. Na git bash digite:
$ git remote add origin link-do-github.com

O remote irá fazer a conexão entre o repositório da máquina e o github. Em seguida, utilizamos o push para poder "empurrar" nosso repositório para o github:
$ git push -u origin main

Na primeira vez que fizermos o push para o github, aparecerá uma tela de login e em seguida uma tela de autorização no browser, clique no botão de autorização verde e confirme sua senha. Feito isso, a primeira versão do seu arquivo estará no github.
Caso deseje adicionar uma nova versão do seu arquivo ou arquivos novos, basta voltar repetir os comandos de add, commit e push.

Ah! Também é possível visualizar o status do seu repositório, os aquivos que sofreram modificações e se eles foram commitados corretamente, basta colocar:
$ git status

E caso queira excluir algum arquivo do github, coloque:
$ git rm nomeDoArquivo.txt

Após utilizar o comando de exclusão, repita os comandos de commit e push.

14/12/2022

Para remover um commit que você acabou de dar no Git, você pode usar o comando git revert. Isso criará um novo commit que desfaz as alterações do commit anterior.

Por exemplo, se o último commit no seu repositório foi com o ID abc123, você pode usar o comando a seguir para desfazer esse commit:
git revert abc123

Isso criará um novo commit com as alterações necessárias para desfazer o commit abc123. Você também pode adicionar uma mensagem de commit opcional com o comando, assim:
git revert abc123 -m "Mensagem opcional do commit"

Lembre-se de que o comando git revert não excluirá o commit original, mas sim criará um novo commit com as alterações necessárias para desfazer as alterações do commit original. Isso é útil porque permite que você mantenha o histórico do seu repositório intacto, enquanto ainda desfaz as alterações indesejadas.

Se você não deseja criar um novo commit para desfazer as alterações do último commit, pode usar o comando git reset em vez do git revert. O comando git reset permite que você desfaça alterações em commits anteriores, mas em vez de criar um novo commit, ele simplesmente descarta as alterações.

Para usar o git reset para desfazer o último commit, você pode usar o comando a seguir:
git reset --hard HEAD~1

O parâmetro --hard indica que queremos descartar as alterações do commit e também qualquer trabalho não commitado. O parâmetro HEAD~1 indica que queremos desfazer o último commit.

Lembre-se de que, diferentemente do git revert, o comando git reset irá excluir permanentemente o commit original e qualquer trabalho não commitado. Portanto, use esse comando com cuidado e certifique-se de que você tem uma cópia de segurança do seu repositório antes de usá-lo.

Se você já tem o número do commit em que deseja desfazer as alterações, pode usá-lo no lugar do parâmetro HEAD~1 no comando git reset. Por exemplo, se o número do commit que você deseja desfazer for abc123, você pode usar o comando a seguir:
git reset --hard abc123

Isso desfará as alterações do commit abc123 e descartará qualquer trabalho não commitado. Novamente, lembre-se de que o comando git reset excluirá permanentemente o commit original e qualquer trabalho não commitado, então use-o com cuidado.

git push --force origin main, caso tente usar git push origin mainnão vai dar pois fala que o git está a frente do repositorio local, pois você deletou a alteração e no git ainda tem.

#Para fazer retrieve e salvar em um diretorio diferente do force-app
1-precisa alterar criar uma pasta e colocar a past no path dentro do arquivo json da org.
2-usar o comando: sfdx force:source:retrieve --manifest  manifest\Package.xml 'apontando o nome do arquivo .xml que quer fazer retrieve'